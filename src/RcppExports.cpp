// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/exampleXPtr.h"
#include <Rcpp.h>

using namespace Rcpp;

// f
IntegerVector f(std::string s);
RcppExport SEXP _exampleXPtr_f(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(f(s));
    return rcpp_result_gen;
END_RCPP
}
// displayHash
void displayHash(XPtr<markerHash> a);
RcppExport SEXP _exampleXPtr_displayHash(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<markerHash> >::type a(aSEXP);
    displayHash(a);
    return R_NilValue;
END_RCPP
}
// getHash
List getHash(XPtr<markerHash> a, CharacterVector name);
RcppExport SEXP _exampleXPtr_getHash(SEXP aSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<markerHash> >::type a(aSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(getHash(a, name));
    return rcpp_result_gen;
END_RCPP
}
// insertHash
void insertHash(XPtr<markerHash> a, CharacterVector name, IntegerVector chr, IntegerVector pos);
RcppExport SEXP _exampleXPtr_insertHash(SEXP aSEXP, SEXP nameSEXP, SEXP chrSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<markerHash> >::type a(aSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type name(nameSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pos(posSEXP);
    insertHash(a, name, chr, pos);
    return R_NilValue;
END_RCPP
}
// newHash
XPtr<markerHash> newHash();
RcppExport SEXP _exampleXPtr_newHash() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(newHash());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_exampleXPtr_f", (DL_FUNC) &_exampleXPtr_f, 1},
    {"_exampleXPtr_displayHash", (DL_FUNC) &_exampleXPtr_displayHash, 1},
    {"_exampleXPtr_getHash", (DL_FUNC) &_exampleXPtr_getHash, 2},
    {"_exampleXPtr_insertHash", (DL_FUNC) &_exampleXPtr_insertHash, 4},
    {"_exampleXPtr_newHash", (DL_FUNC) &_exampleXPtr_newHash, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_exampleXPtr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
